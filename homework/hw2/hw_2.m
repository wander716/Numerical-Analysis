% 跑单个problem时，记得把其他problems注释掉！

% hw2-p1
p0 = -1;
p1 = -1 - (-1 + cos(-1))/(3 - sin(-1));
p2 = -0.88 - ((-0.88)^3 + cos(-0.88))/(3*(-0.88)^2 - sin(-0.88));


% hw2-p3-a
F = @(x) [
    3*x(1) - cos(x(2)*x(3)) - 1/2;
    4*x(1)^2 - 625*x(2)^2 + 2*x(2) - 1;
    exp(-x(1)*x(2)) + 20*x(3) + (10*pi - 3)/3
];
J = @(x) [
    3, x(3)*sin(x(2)*x(3)), x(2)*sin(x(2)*x(3));
    8*x(1), -1250*x(2) + 2, 0;
    -x(2)*exp(-x(1)*x(2)), -x(1)*exp(-x(1)*x(2)), 20
];

x = [0; 0; 0];
fprintf('初始值：x0 = [0; 0; 0]\n');
for k = 1:2
    x = x - J(x) \ F(x); % J(x)的逆 * F(x) = J(x) \ F(x)
    fprintf('迭代%d次：x%d = [%.8f; %.8f; %.8f]\n', k, k, x(1), x(2), x(3));
end


% hw2-p3-b
clc; clear;
F = @(x) [
    x(1)^2 + x(2) - 37;
    x(1) - x(2)^2 - 5;
    x(1) + x(2) + x(3) - 3
];
J = @(x) [
    2*x(1), 1, 0;
    1, -2*x(2), 0;
    1, 1, 1
];
x = [0; 0; 0];
fprintf('初始值：x0 = [0; 0; 0]\n');
for k = 1:2
    x = x - J(x) \ F(x);
    fprintf('迭代%d次：x%d = [%.8f; %.8f; %.8f]\n', k, k, x(1), x(2), x(3));
end


% hw2-p4-a
F = @(x) [
    15*x(1) + x(2)^2 - 4*x(3) - 13;
    x(1)^2 + 10*x(2) - x(3) - 11;
    x(2)^3 - 25*x(3) + 22
];
J = @(x) [
    15, 2*x(2), -4;
    2*x(1), 10, -1;
    0, 3*x(2)^2, -25
];
x = [0; 0; 0];
TOL = 0.05;
stepsize = 0.001;
k = 0;
G = norm(F(x));
fprintf('初始值：x0 = [0; 0; 0]\n');

while G >= TOL
    k = k + 1;
    grad = -J(x)' * F(x);
    fprintf('迭代%d次：x%d = [%.8f; %.8f; %.8f]\n', k, k, x(1), x(2), x(3));
    x = x + stepsize * grad;
    G = norm(F(x));
end
fprintf('迭代%d次：x%d = [%.8f; %.8f; %.8f]\n', k + 1, k + 1, x(1), x(2), x(3));

% hw2-p4-b
F = @(x) [
    10*x(1) - 2*x(2)^2 + x(2) - 2*x(3) - 5;
    8*x(2)^2 + 4*x(3)^2 - 9;
    8*x(2)*x(3) + 4;
];
J = @(x) [
    10, 4*x(2) + 1, -2;
    0, 16*x(2), 8*x(3);
    0, 8*x(3), 8*x(2)
];
X = [0; 0; 0];
TOL = 0.05;
stepsize = 0.001; %步长可根据实际运行情况（迭代次数）进行修改
k = 0;
G = norm(F(x)); % G(X) = ||F(x)||,即2-范数
fprintf('初始值：x0 = [0; 0; 0]\n');

while G >= TOL
    k = k + 1;
    grad = -J(x)' * F(x); %计算梯度（即对F(X)^2求导；尤其注意负号！！！
    fprintf('迭代%d次：X%d = [%.8f; %.8f; %.8f]\n', k, k, x(1), x(2), x(3));
    X = X + stepsize * grad;
    G = norm(F(x));
end
fprintf('迭代%d次：x%d = [%.8f; %.8f; %.8f]\n', k + 1, k + 1, x(1), x(2), x(3));